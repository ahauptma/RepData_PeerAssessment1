if (outcome == "heart attack") {
my.col <- 11
}
else if (outcome == "heart failure") {
my.col <- 17
}
else if (outcome == "pneumonia") {
my.col <- 23
}
else {
stop("invalid outcome")
}
my.state <- my.outcomes[my.outcomes[,7] == state,]
cand <- my.state[my.state[,my.col] == min(my.state[,my.col]),]
winner <- cand[cand[,2] == min(cand[,2]),]
winner[,2]
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX", "heart attack")
best("TX", "heart failure")
outcome[grep("HARRIS COUNTY", my.outcomes[,2]), 1:20]
outcome[grep("HARRIS COUNTY", outcome[,2]), 1:20]
outcome[grep("FORT DUNCAN", outcome[,2]), 1:20]
best <- function(state, outcome) {
## Read outcome data
my.outcomes <- read.csv("~/Rprog Coursera/outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
if (!(state %in% unique(my.outcomes$State))) {
stop("invalid state")
}
if (outcome == "heart attack") {
my.col <- 11
}
else if (outcome == "heart failure") {
my.col <- 17
}
else if (outcome == "pneumonia") {
my.col <- 23
}
else {
stop("invalid outcome")
}
my.state <- my.outcomes[my.outcomes[,7] == state,]
cand <- my.state[my.state[,my.col] == min(as.numeric(my.state[,my.col])),]
winner <- cand[cand[,2] == min(cand[,2]),]
winner[,2]
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX", "heart failure")
best <- function(state, outcome) {
## Read outcome data
my.outcomes <- read.csv("~/Rprog Coursera/outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
if (!(state %in% unique(my.outcomes$State))) {
stop("invalid state")
}
if (outcome == "heart attack") {
my.col <- 11
}
else if (outcome == "heart failure") {
my.col <- 17
}
else if (outcome == "pneumonia") {
my.col <- 23
}
else {
stop("invalid outcome")
}
my.state <- my.outcomes[my.outcomes[,7] == state,]
cand <- my.state[my.state[,my.col] == min(as.numeric(my.state[,my.col]), na.rm=T),]
winner <- cand[cand[,2] == min(cand[,2]),]
winner[,2]
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "pneumonia")
best("NY", "pnumonia")
?order
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
my.outcomes <- read.csv("~/Rprog Coursera/outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
if (!(state %in% unique(my.outcomes$State))) {
stop("invalid state")
}
if (outcome == "heart attack") {
my.col <- 11
}
else if (outcome == "heart failure") {
my.col <- 17
}
else if (outcome == "pneumonia") {
my.col <- 23
}
else {
stop("invalid outcome")
}
## Return hospital name in that state with the given rank
## 30-day death rate
my.state <- my.outcomes[my.outcomes[,7] == state &
!is.na(as.numeric(my.outcomes[,my.col])) ,]
if (num=="best") num <- 1
if (num=="worst") num <- nrow(my.state)
my.state <- my.state[order(as.numeric(my.state[,my.col]), my.state[,2]),]
my.state[num,2]
}
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
?grep
grep("AL", state.ab)
grep("AL", state.abb)
grep("AK", state.abb)
rankall <- function(outcome, num = "best") {
## Read outcome data
my.outcomes <- read.csv("~/Rprog Coursera/outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
if (outcome == "heart attack") {
my.col <- 11
}
else if (outcome == "heart failure") {
my.col <- 17
}
else if (outcome == "pneumonia") {
my.col <- 23
}
else {
stop("invalid outcome")
}
## Return hospital name in that state with the given rank
## 30-day death rate
if (num=="best") num <- 1
flag <- num=="worst"
states <- unique(my.outcomes$State)
states <- states[order(states)]
output <- data.frame(hospital=character(length(states)),state=states)
for (state in unique(my.outcomes$State)) {
my.state <- my.outcomes[my.outcomes[,7] == state &
!is.na(as.numeric(my.outcomes[,my.col])) ,]
if (flag) num <- nrow(my.state)
my.state <- my.state[order(as.numeric(my.state[,my.col]), my.state[,2]),]
ind <- grep(my.state, states)
output[ind, "hospital"] <- my.state[num,2]
}
output
}
head(rankall("heart attack", 20), 10)
warnings()
outcome <- "heart attack"
num <- 20
my.outcomes <- read.csv("~/Rprog Coursera/outcome-of-care-measures.csv",
colClasses = "character")
if (outcome == "heart attack") {
my.col <- 11
}
else if (outcome == "heart failure") {
my.col <- 17
}
else if (outcome == "pneumonia") {
my.col <- 23
}
else {
stop("invalid outcome")
}
if (outcome == "heart attack") {
my.col <- 11
} else if (outcome == "heart failure") {
my.col <- 17
} else if (outcome == "pneumonia") {
my.col <- 23
} else {
stop("invalid outcome")
}
if (num=="best") num <- 1
flag <- num=="worst"
states <- unique(my.outcomes$State)
states <- states[order(states)]
output <- data.frame(hospital=character(length(states)),state=states)
state <- states[1]
my.state <- my.outcomes[my.outcomes[,7] == state &
!is.na(as.numeric(my.outcomes[,my.col])) ,]
if (flag) num <- nrow(my.state)
my.state <- my.state[order(as.numeric(my.state[,my.col]), my.state[,2]),]
ind <- grep(my.state, states)
ind <- grep(state, states)
output[ind, "hospital"] <- my.state[num,2]
output
rankall <- function(outcome, num = "best") {
## Read outcome data
my.outcomes <- read.csv("~/Rprog Coursera/outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
if (outcome == "heart attack") {
my.col <- 11
} else if (outcome == "heart failure") {
my.col <- 17
} else if (outcome == "pneumonia") {
my.col <- 23
} else {
stop("invalid outcome")
}
## Return hospital name in that state with the given rank
## 30-day death rate
if (num=="best") num <- 1
flag <- num=="worst"
states <- unique(my.outcomes$State)
states <- states[order(states)]
output <- data.frame(hospital=character(length(states)),state=states)
for (state in unique(my.outcomes$State)) {
my.state <- my.outcomes[my.outcomes[,7] == state &
!is.na(as.numeric(my.outcomes[,my.col])) ,]
if (flag) num <- nrow(my.state)
my.state <- my.state[order(as.numeric(my.state[,my.col]), my.state[,2]),]
ind <- grep(state, states)
output[ind, "hospital"] <- my.state[num,2]
}
output
}
head(rankall("heart attack", 20), 10)
warnings
warnings()
state <- states[2]
my.state <- my.outcomes[my.outcomes[,7] == state &
!is.na(as.numeric(my.outcomes[,my.col])) ,]
if (flag) num <- nrow(my.state)
my.state <- my.state[order(as.numeric(my.state[,my.col]), my.state[,2]),]
ind <- grep(state, states)
ind
head(my.state)
my.state[num,2]
output[ind, "hospital"] <- my.state[num,2]
output[ind, "hospital"] <- as.character(my.state[num,2])
output <- data.frame(hospital=character(length(states)),state=states)
output[ind, "hospital"] <- as.character(my.state[num,2])
output[2, "hospital"]
str(states)
rankall <- function(outcome, num = "best") {
## Read outcome data
my.outcomes <- read.csv("~/Rprog Coursera/outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
if (outcome == "heart attack") {
my.col <- 11
} else if (outcome == "heart failure") {
my.col <- 17
} else if (outcome == "pneumonia") {
my.col <- 23
} else {
stop("invalid outcome")
}
## Return hospital name in that state with the given rank
## 30-day death rate
if (num=="best") num <- 1
flag <- num=="worst"
states <- unique(my.outcomes$State)
states <- states[order(states)]
output <- data.frame(hospital=character(length(states)),state=states,
stringsAsFactors=FALSE)
for (state in unique(my.outcomes$State)) {
my.state <- my.outcomes[my.outcomes[,7] == state &
!is.na(as.numeric(my.outcomes[,my.col])) ,]
if (flag) num <- nrow(my.state)
my.state <- my.state[order(as.numeric(my.state[,my.col]), my.state[,2]),]
ind <- grep(state, states)
output[ind, "hospital"] <- as.character(my.state[num,2])
}
output
}
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
my.page2 <- GET("http://biostat.jhsph.edu/~jleek/contact.html")
library(httr)
library(httpuv)
library(jsonlite)
my.page2 <- GET("http://biostat.jhsph.edu/~jleek/contact.html")
split.text <- strsplit(content(my.page2, 'text'), '\n')
head(split.text)
sapply(c(10, 20, 30, 100), function(x) nchar(split_text[x]))
sapply(c(10, 20, 30, 100), function(x) nchar(split.text[x]))
split.text <- unlist(strsplit(content(my.page2, 'text'), '\n'))
sapply(c(10, 20, 30, 100), function(x) nchar(split.text[x]))
my.page3 <- GET("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
str(my.page3)
str(my.page3$content)
split.text <- unlist(strsplit(content(my.page2, 'text'), '\n'))
str(split.text)
head(split.text)
head(split.text, 25)
head(split.text, 50)
head(split.text, 100)
split.text
str(my.page3)
content(my.page2, 'text')
?download
?download.file
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",
"~/Getting Data Coursera/Quiz2.txt")
?read.table
raw.data <- read.fwf("~/Getting Data Coursera/Quiz2.txt",
widths=c(14, 4, 9, 4, 9, 4, 9, 4, 4),
header=TRUE,
skip=2)
raw.data <- read.fwf("~/Getting Data Coursera/Quiz2.txt",
widths=c(14, 4, 9, 4, 9, 4, 9, 4, 4),
header=FALSE,
skip=3)
head(raw.data)
raw.data <- read.fwf("~/Getting Data Coursera/Quiz2.txt",
widths=c(14, 5, 9, 4, 9, 4, 9, 4, 4),
header=FALSE,
skip=3)
head(raw.data)
sum(raw.data$V4)
raw.data <- read.fwf("~/Getting Data Coursera/Quiz2.txt",
widths=c(14, 5, 9, 4, 9, 4, 9, 4, 4),
header=FALSE,
skip=3, as.is=TRUE)
head(raw.data)
sum(raw.data$V4)
sum(as.numeric(raw.data[2:nrow(raw.data), 4]))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",
"~/Getting Data/Q3-1.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",
"~/Getting Data Coursera/Q3-1.csv")
q31 <- read.csv("~/Getting Data Coursera/Q3-1.csv")
q31 <- read.csv("~/Getting Data Coursera/Q3-1.csv", as.is==TRUE)
q31 <- read.csv("~/Getting Data Coursera/Q3-1.csv", as.is=TRUE)
agricultureLogical <- q31$ACR == '3' & q31$AGS == '6'
which(agricultureLogical)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg",
"~/Getting Data Coursera/Q3-2.csv")
install.packages("jpeg")
?read.jpeg
library(jpeg)
?read.jpeg
?readJPEG
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg",
"~/Getting Data Coursera/Q3-2.jpg")
q32 <- readJPEG("~/Getting Data Coursera/Q3-2.csv")
q32 <- readJPEG("~/Getting Data Coursera/Q3-2.csv", native=TRUE)
quantile(q32, c(0.3, 0.8))
q32 <- readJPEG("~/Getting Data Coursera/Q3-2.jpg", native=TRUE)
quantile(q32, c(0.3, 0.8))
str(q32)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg",
"~/Getting Data Coursera/Q3-2.jpg", mode='wb')
q32 <- readJPEG("~/Getting Data Coursera/Q3-2.jpg", native=TRUE)
quantile(q32, c(0.3, 0.8))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",
"~/Getting Data Coursera/Q3-3a.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv",
"~/Getting Data Coursera/Q3-3b.csv")
q33a <- read.csv("~/Getting Data Coursera/Q3-3a.csv", as.is=TRUE)
q33b <- read.csv("~/Getting Data Coursera/Q3-3b.csv", as.is=TRUE)
names(q33a)
head(q33a)
?read.csv
q33a <- read.table("~/Getting Data Coursera/Q3-3a.csv", sep=',',
skip=5, as.is=TRUE)
?read.csv
head(q33a)
q33a.w.rank <- q33a[which(q33a[,2],)]
q33a.w.rank <- q33a[which(!is.na(q33a[,2]),)]
q33a.w.rank <- q33a[which(!is.na(q33a[,2])),]
q33a.w.rank <- q33a[which((q33a[,2 != 'NA'])),]
tail(q33a)
q33a <- read.table("~/Getting Data Coursera/Q3-3a.csv", sep=',', quote="\""
skip=5, as.is=TRUE)
q33a <- read.table("~/Getting Data Coursera/Q3-3a.csv", sep=',', quote="\"",
skip=5, as.is=TRUE)
tail(q33a)
q33a.w.rank <- q33a[which((q33a[,2 != ''])),]
q33a.w.rank <- q33a[which((q33a[,2] != '')),]
tail(q33a.w.rank)
?\d
?grep
(q33a[,2] %in% \d)
grep('\d', q33a[,2], perl=TRUE)
q33a.w.rank <- q33a[!is.na(as.numeric(q33a[,2])),]
tail(q33a.w.rank)
head(q33b)
tail(q33b)
q33 <- merge(q33a, q33b, by.x='V1', by.y='CountryCode')
names(q33)
length(unique(q33$V1))
q33
q33[,1]
q33a <- read.table("~/Getting Data Coursera/Q3-3a.csv", sep=',', quote="\"",
skip=5, as.is=TRUE)
q33 <- merge(q33a, q33b, by.x='V1', by.y='CountryCode')
q33[,1]
setdiff(q33b$CountryCode, q33a$V1)
setdiff(q33a$V1, q33b$CountryCode)
q33 <- merge(q33a.w.rank, q33b, by.x='V1', by.y='CountryCode')
head(q33)
q33[order(-q33[,2]),]
names(q33)
q33[order(-q33$V2),]
q33[order(q33, -q33$V2),]
?order
q33[order(-1 * as.numeric(q33$V2)),]
q33[order(-1 * as.numeric(q33$V2)),1:10]
q33.my.order <- q33[order(-1 * as.numeric(q33$V2)),1:10]
q33[13,]
q33.my.order[13,]
names(q33)
unique(q33$Income.Group)
tapply(q33$V2, q33$Income.Group, mean)
tapply(q33$V2, q33$Income.Group, mean, na.rm=T)
tapply(q33$V2, q33$Income.Group, function(x) mean(as.numeric(x), na.rm=T))
?cut
q33$GDP.rank.cat <- cut(q33$V2, 5)
q33$GDP.rank.cat <- cut(as.numeric(q33$V2), 5)
table(q33$GDP.rank.cat, q33$Income.Group)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?trellis.par.set
library(datasets)
data(airquality)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data=airquality, smooth="loess")
qplot(Wind, Ozone, data=airquality) + geom_smooth()
?plot
setwd("C:\Users\Aaron\RepData_PeerAssessment1")
setwd("C:\\Users\\Aaron\\RepData_PeerAssessment1")
?read.table
read.table("activity/activity.csv", nrows=20)
read.table("activity/activity.csv", nrows=1)
read.table("activity/activity.csv", skip=1, nrows=1)
read.table("activity/activity.csv", skip=2, nrows=1)
read.table("activity/activity.csv", nrows=1, sep=',')
read.table("activity/activity.csv", nrows=5, sep=',')
read.table("activity/activity.csv", nrows=5, sep=',', header=TRUE)
step.data <- read.csv("activity/activity.csv")
step.data <- read.csv("activity/activity.csv", as.is=TRUE)
summary(step.data)
head(as.date(step.data[,2]))
head(date(step.data[,2]))
head(Date(step.data[,2]))
?as.date
?as.posixct
?POSIXct
head(as.POSIXct(step.data[,2]))
head(as.Date(step.data[,2]))
head(step.data)
?any.na
?is.na
anyNA(as.Date(step.data$date))
anyNA(step.data$date <- as.Date(step.data$date))
summary(step.data)
paste(round(100*mean(is.na(step.data$steps)), 0), '%')
paste0(round(100*mean(is.na(step.data$steps)), 0), '%')
install.packages("xtable")
library(xtable)
?xtable
names(xtable)
names(step.data)
print(xtable(aggregate(steps ~ date, step.data, mean)))
head(as.char(step.data$date))
head(as.string(step.data$date))
head(as.String(step.data$date))
head(as.Char(step.data$date))
?as.char
?as.string
?as.character
head(as.character(step.data$date))
xtable(aggregate(steps ~ as.character(date), step.data, mean))
summary(step.data)
print(xtable(aggregate(steps ~ as.character(date), step.data, sum)))
library(ggplot2)
ggplot(aes(interval, steps)) + geom_hist(stat="identity")
ggplot(aes(interval, steps), data=step.data) + geom_hist(stat="identity")
?geom
?geom_bar
ggplot(aes(y=steps), data=step.data) + geom_bar(stat="identity")
ggplot(aes(x=interval, y=steps), data=step.data) + geom_bar(stat="identity")
ggplot(aes(x=steps), data=step.data) + geom_bar(stat="identity")
ggplot(aes(x=date, y=steps), data=step.data) + geom_bar(stat="identity")
